<!--===========================================================================
  This is the build file for the Pentaho BI Platform Engine Core project.
  
  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See common_build.xml for more details
============================================================================-->
<project name="Apache VFS Browser" basedir="." default="jar" 
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Engine Core project
		and works with the common_build.xml file.
	</description>

	<!-- Define the default location of the common build file -->
	<property name="common.build.file" value="./common_build.xml" 
		description="This is the location of the standardized common_build.xml file"/>

	<!-- Import the common_build.xml file which contains all the default tasks -->
	<import file="${common.build.file}"/>


    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 

	<target name="resolve"
	          depends="resolve-default, resolve-test, resolve-swt"
	          description="Retrieves all the dependent libraries" />

	  <target name="resolve-swt" depends="resolve-swt-linux,resolve-swt-mac,resolve-swt-windows">
	    <!-- echo message="isLinux=${isLinux},isMac=${isMac},isWindows=${isWindows}" / -->
	  </target>

	  <target name="resolve-swt-linux" if="isLinux" depends="resolve-init">
	    <ivy:retrieve conf="default-swt-linux" pattern="${lib.dir}/[module]-[revision].[ext]" />
	  </target>

	  <target name="resolve-swt-mac" if="isMac" depends="resolve-init">
 	    <ivy:retrieve conf="default-swt-mac" pattern="${lib.dir}/[module]-[revision].[ext]" />
	  </target>

	  <target name="resolve-swt-windows" if="isWindows" depends="resolve-init">
	    <ivy:retrieve conf="default-swt-windows" pattern="${lib.dir}/[module]-[revision].[ext]" />
	  </target>
	
	
	<target name="compile.compile" depends="init" description="Performs the actual javac compile">
	    <javac 
	    	     destdir="${classes.dir}"
	           debug="${javac.debug}"
	           deprecation="${javac.deprecation}"
	           fork="true"
	           source="${javac.source}"
	           target="${javac.target}"
	    	>
	      <classpath>
	        <path refid="classpath" />
	      </classpath>
	      <src path="${src.dir}" />
	    </javac>
	  </target>
	
	  <target name="jar" depends="jar-code, jar-properties" description="Jars up the bin directory after a compile" />
	
	<target name="jar-code" depends="compile" description="Jars up the bin directory after a compile">
	    <jar destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar">
	      <manifest>
	        <attribute name="Implementation-Title" value="${impl.title}" />
	        <attribute name="Implementation-Version" value="${project.revision}" />
	        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
	        <attribute name="Implementation-ProductID" value="${impl.productID}" />
	      </manifest>
	      <fileset dir="${classes.dir}" excludes="**/*.properties, **/vfs/test/*" />
	      <fileset dir="${res.dir}" includes="**/*" />
	    </jar>
	  </target>
	
	<target name="jar-properties" depends="" description="Jars up the properties files bin directory after a compile">
	    <jar destfile="${dist.dir}/${ivy.artifact.id}-i18n-${project.revision}.jar">
	      <manifest>
	        <attribute name="Implementation-Title" value="${impl.title}" />
	        <attribute name="Implementation-Version" value="${project.revision}" />
	        <attribute name="Implementation-Vendor" value="${impl.vendor}" />
	        <attribute name="Implementation-ProductID" value="${impl.productID}" />
	      </manifest>
	      <fileset dir="${classes.dir}" includes="**/*.properties"/>
	    </jar>
	  </target>

  <target name="publish-local-nojar" depends="install-ivy" description="Publishes the jar file to the local repository">
    <ivy:resolve file="ivy.xml" />
    <ivy:publish resolver="local" pubrevision="${project.revision}" overwrite="true" forcedeliver="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
      <artifacts pattern="${dist.dir}/[artifact]-i18n-[revision].[ext]" />
    </ivy:publish>
  </target>

</project>